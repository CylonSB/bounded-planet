use crate::networking::{id::ConnectionId, id::StreamId, packets::Packet};
use tokio::sync::mpsc::UnboundedSender;

use super::streams::RecvError;

/// An event generated by the network
#[derive(Debug)]
pub enum ReceiveEvent {

    /// A new connection has opened
    Connected(ConnectionId),

    /// A new bidirectional data stream in a connection has opened
    OpenedStream {
        connection_id: ConnectionId,
        stream_id: StreamId,
        sender: UnboundedSender<Packet>,
    },

    /// A packet has arrived in a stream
    ReceivedPacket {
        connection_id: ConnectionId,
        stream_id: StreamId,
        data: Packet,
    },

    /// An error occured in attempting to receive a packet from the given stream
    ReceiveError {
        connection_id: ConnectionId,
        stream_id: StreamId,
        err: RecvError,
    },

    /// A connection has closed
    Disconnected(ConnectionId),

    /// The network socket has closed
    SocketClosed,

    // An error occured during sending
    //todo:SendError
}

/// An event to send to the network
#[derive(Debug)]
pub enum SendEvent {
    SendPacket {
        connection_id: ConnectionId,
        stream_id: StreamId,
        data: Packet,
    },
}
