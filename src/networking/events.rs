use crate::networking::{id::ConnectionId, id::StreamId, packets::Packet};
use tokio::sync::mpsc::UnboundedSender;

use super::streams::RecvError;

/// An event generated by the network
#[derive(Debug)]
pub enum ReceiveEvent {
    Connected(ConnectionId),
    OpenedStream {
        connection_id: ConnectionId,
        stream_id: StreamId,
        sender: UnboundedSender<Packet>,
    },
    ReceivedPacket {
        connection_id: ConnectionId,
        stream_id: StreamId,
        data: Packet,
    },
    ReceiveError {
        connection_id: ConnectionId,
        stream_id: StreamId,
        err: RecvError,
    },
    Disconnected(ConnectionId),

    SocketClosed,
    SendError,
}

/// An event to send to the network
#[derive(Debug)]
pub enum SendEvent {
    SendPacket {
        connection_id: ConnectionId,
        stream_id: StreamId,
        data: Packet,
    },
}
