use crate::networking::{id::ConnectionId, id::StreamId, packets::Packet};
use tokio::sync::mpsc::UnboundedSender;

use super::streams::{RecvError, SendError};

use thiserror::Error;

#[derive(Debug, Error)]
pub enum NetworkError {
    /// An error occured in attempting to receive a packet from the given stream
    #[error("Unable to receive packet on stream {stream_id:?} of connection {connection_id:?}. Underlying error: {err:?}")]
    ReceiveError {
        connection_id: ConnectionId,
        stream_id: StreamId,
        err: RecvError,
    },

    /// An error occured during sending
    #[error("Unable to send packet on stream {stream_id:?} of connection {connection_id:?}. Underlying error: {err:?}")]
    SendError {
        connection_id: ConnectionId,
        stream_id: StreamId,
        err: SendError,
    },

    /// An error occured attempting to send a packet through the MPSC to the async packet sender loop
    #[error("MPSC to packet sender closed for stream {stream_id:?} of connection {connection_id:?}. Packet that wasn't sent: {failed_packet:?}")]
    StreamSenderError {
        connection_id: ConnectionId,
        stream_id: StreamId,
        failed_packet: Packet,
    },

    /// An error occurred in quinn while attempting to connect
    #[error("Quinn connection error: {0:?}")]
    ConnectionError(#[from] quinn::ConnectionError)
}

/// An event generated by the network
#[derive(Debug)]
pub enum ReceiveEvent {

    /// A new connection has opened
    Connected(ConnectionId),

    /// A new bidirectional data stream in a connection has opened
    OpenedStream {
        connection_id: ConnectionId,
        stream_id: StreamId,
        sender: UnboundedSender<Packet>,
    },

    /// A packet has arrived in a stream
    ReceivedPacket {
        connection_id: ConnectionId,
        stream_id: StreamId,
        data: Packet,
    },

    /// A connection has closed
    Disconnected(ConnectionId),

    /// The network socket has closed
    SocketClosed,

    /// An error occurred from the socket
    NetworkError(NetworkError),
}

/// An event to send to the network
#[derive(Debug)]
pub enum SendEvent {
    SendPacket {
        connection_id: ConnectionId,
        stream_id: StreamId,
        data: Packet,
    },

    //todo(#38): Add a variant requesting a new stream
}
